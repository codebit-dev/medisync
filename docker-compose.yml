version: '3.8'

services:
  # MySQL Database
  database:
    image: mysql:8.0
    container_name: medisync-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-medisync_root_2024}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-medisync}
      MYSQL_USER: ${MYSQL_USER:-medisync_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-medisync_pass_2024}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - medisync-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: medisync-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - medisync-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medisync-backend
    restart: always
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      DATABASE_URL: mysql+pymysql://${MYSQL_USER:-medisync_user}:${MYSQL_PASSWORD:-medisync_pass_2024}@database:3306/${MYSQL_DATABASE:-medisync}?charset=utf8mb4
      REDIS_URL: redis://redis:6379/0
      MYSQL_HOST: database
      MYSQL_PORT: 3306
      MYSQL_USER: ${MYSQL_USER:-medisync_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-medisync_pass_2024}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-medisync}
      ICD11_CLIENT_ID: ${ICD11_CLIENT_ID}
      ICD11_CLIENT_SECRET: ${ICD11_CLIENT_SECRET}
      ABHA_CLIENT_ID: ${ABHA_CLIENT_ID}
      ABHA_CLIENT_SECRET: ${ABHA_CLIENT_SECRET}
      ABHA_AUTH_URL: ${ABHA_AUTH_URL:-https://healthidsbx.abdm.gov.in/api/v1/auth}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "5000:5000"
    networks:
      - medisync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./medisync-frontend
      dockerfile: Dockerfile
    container_name: medisync-frontend
    restart: always
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000}
    ports:
      - "80:80"
      - "443:443"
    networks:
      - medisync-network
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: medisync-nginx
    restart: always
    depends_on:
      - frontend
      - backend
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - medisync-network
    profiles:
      - production

  # Elasticsearch (optional, for advanced search)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: medisync-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - medisync-network
    profiles:
      - search

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: medisync-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - medisync-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: medisync-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3000:3000"
    networks:
      - medisync-network
    profiles:
      - monitoring

networks:
  medisync-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
